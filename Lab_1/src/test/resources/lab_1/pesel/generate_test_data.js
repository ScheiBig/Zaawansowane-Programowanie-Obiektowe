function validate_PESEL(pesel) {
	if (pesel == null) return ({ er_null: true })

	if (pesel.length != 11) return ({ er_length: true })

	if (!/^\d{11}/.test(pesel)) return ({ er_char: true })

	yy = +pesel.substring(0, 2)
	mm = +pesel.substring(2, 4)
	dd = +pesel.substring(4, 6)

	g = +pesel[9]

	if (mm % 20 > 12 || mm % 20 == 0 || mm == 0) return ({ er_month: true })

	switch (mm - mm % 20) {
		case 0: yy += 1900; break;
		case 20: yy += 2000; break;
		case 40: yy += 2100; break;
		case 60: yy += 2200; break;
		case 80: yy += 1800; break;
	}

	mm = mm % 20;

	dt = `${yy}-${mm}-${dd}`;

	if (isNaN(new Date(dt))) return ({ er_day: true })

	sum_w = [ 1, 3, 7, 9, 1, 3, 7, 9, 1, 3 ]

	sum = pesel.split("")
		.slice(0, 10)
		.map((v, i) => +v * sum_w[ i ])
		.reduce((a, b) => a + b)


	sum = 10 - sum % 10;

	if (+pesel[ 10 ] !== sum) return ({ er_sum: true })

	return false
}

function parse_PESEL(pesel) {

	yy = +pesel.substring(0, 2)
	mm = +pesel.substring(2, 4)
	dd = +pesel.substring(4, 6)

	g = +pesel[9]

	switch (mm - mm % 20) {
		case 0: yy += 1900; break;
		case 20: yy += 2000; break;
		case 40: yy += 2100; break;
		case 60: yy += 2200; break;
		case 80: yy += 1800; break;
	}

	mm = mm % 20;

	dt = `${yy}-${mm.toString().padStart(2, "0")}-${dd.toString().padStart(2, "0")}`;

	gg = g % 2 == 0 ? "FEMALE" : "MALE"

	return [ dt, gg ]
}


let pesele = [
	"93060281854",
	"91060995269",
	"01310334438",
	"75111694295",
	"90052275998",
	"76091867219",
	"06322798395",
	"62022041995",
	"55103197834",
	"66011885247",
	"68060246763",
	"72041293875",
	"62071827546",
	"70041147132",
	"83111721897",
	"04322329393",
	"67032149491",
	"51032869372",
	"67112545427",
	"52010335432",
	"75063014572",
	"78112549526",
	"72040147618",
	"80091915995",
	"78083143433",
	"07292285821",
	"94052129264",
	"66091831277",
	"61103138616",
	"95062144751",
	"57081662638",
	"72011677588",
	"01282545124",
	"52082739125",
	"50052323367",
	"02263074824",
	"75051372778",
	"89062611913",
	"88072829172",
	"80092691528",
	"77032497395",
	"65032086277",
	"53071918167",
	"86061797125",
	"03211869987",
	"07272627739",
	"05240779127",
	"97070959769",
	"68010694943",
	"96090317485",
	"60072194953",
	"54021337117",
	"06222536824",
	"60030975686",
	"70031765236",
	"54092175393",
	"62011912327",
	"80091155236",
	"92100648567",
	"94122644994",
	"08300177543",
	"74070815262",
	"50053198849",
	"81050884886",
	"81020451692",
	"76063062183",
	"02290182972",
	"07251841459",
	"51022364869",
	"62100191822",
	"71082747844",
	"49031435867",
	"58061691136",
	"02251923174",
	"81062034334",
	"50031978177",
	"64101028794",
	"53012726174",
	"65051811249",
	"55022774127",
	"59041239232",
	"51091843742",
	"91121342786",
	"76101827815",
	"77031885191",
	"75042828246",
	"54020312988",
	"05240591855",
	"61101731675",
	"79012136458",
	"98022211579",
	"59041121678",
	"51090816259",
	"07230328447",
	"96121754654",
	"64051866266",
	"54012047476",
	"60100958584",
	"56020336593",
	"89062266793",
	"62101256579",
	"73071063216",
	"07212058359",
	"67091178977",
	"55062439734",
	"75110812881",
	"86040244497",
	"74122916839",
	"90092831783",
	"66040113928",
	"94062491979",
	"53011549811",
	"54061574138",
	"73090799527",
	"51040362397",
	"84110481342",
	"81082388671",
	"59102058972",
	"55111047699",
	"59101779689",
	"03240149825",
	"06270375996",
	"91121333142",
	"59072039377",
	"69111616544",
	"71080691411",
	"64111023189",
	"75040298223",
	"04290198296",
	"88020557991",
	"03283095578",
	"78110479148",
	"08222739696",
	"72081393333",
	"86090597378",
	"95081642689",
	"78092211561",
	"70061719993",
	"85020399471",
	"80110179232",
	"79062885296",
	"69092691387",
	"82073011981",
	"98071747421",
	"79090529777",
	"79011019145",
	"01213052589",
	"03241875217",
	"70043047294",
	"54080188239",
	"06281957963",
	"72102261834",
	"55091453639",
	"53012431683",
	"87103092383",
	"54110658385",
	"03311821966",
	"54110751385",
	"70120787824",
	"59102038914",
	"69070966575",
	"60063036576",
	"91042819411",
	"55011723978",
	"99073135214",
	"63070448925",
	"79030511398",
	"53050229888",
	"62062234344",
	"74082377815",
	"89061381341",
	"60010849545",
	"71030921973",
	"56050898652",
	"81081426686",
	"53012683127",
	"04290873973",
	"95061112669",
	"86050181322",
	"62020236436",
	"05251716966",
	"98081769666",
	"56012822741",
	"76102711641",
	"56121327456",
	"57042978978",
	"58031998438",
	"93033179849",
	"92042849295",
	"61101518252",
	"97051426837",
	"04281063934",
	"72022282342",
	"51030114443",
	"71050886995",
	"76051451621",
	"70013195642",
	"85120695785",
	"60072152164",
	"60031189136",
	"93110357658",
	"68080974594",
	"89070462215",
	"04260562388",
	"76011577251",
	"97102149634",
	"68051242699",
	"07281931142",
	"05292248866",
	"72050222561",
	"88081194911",
	"78101094897",
	"80121688734",
	"56041415297",
	"50072489537",
	"49050966254",
	"49073041112",
	"59012487655",
	"99122147669",
	"96120118266",
	"93031998545",
	"72042981168",
	"80060538994",
	"88080971261",
	"90073059986",
	"71011433765",
	"86082482318",
	"73091664365",
	"60121813437",
	"03230742775",
	"04320631162",
	"95061842728",
	"75021678413",
	"89120875712",
	"74091831111",
	"91110683995",
	"79121495994",
	"03233044164",
	"07282887985",
	"62011428147",
	"52081948887",
	"51010629222",
	"75111226878",
	"59041535383",
	"84042195544",
	"51110958521",
	"91080226514",
	"64082275596",
	"98092212928",
	"68092372766",
	"53050189414",
	"60092662485",
	"91021543566",
	"62032453395",
	"55032682849",
	"82021856622",
	"60060224844",
	"67103118568",
	"64090844621",
	"55041841675",
	"76102714293",
	"83082973556",
	"62112538323",
	"77081235694",
	"50032474733",
	"01292685261",
	"62091834999",
	"08321695284",
	"71043079759",
	"53010834167",
	"60072886128",
	"62102829253",
	"70022069963",
	"75010686131",
	"71102417184",
	"50020844993",
	"67052622525",
	"71111543577",
	"08221061156",
	"55040642581",
	"92021913715",
	"51100444382",
	"93040554161",
	"86072788284",
	"00321265243",
	"49041298957",
	"62073056447",
	"72072483472",
	"83011032721",
	"80111263659",
	"74011684636",
	"61083017358",
	"60123068552",
	"52120675125",
	"55030381962",
	"66071739856",
	"88030872673",
	"93012411447",
	"61110485545",
	"71112246813"
];

function shuffle(array) {
	let currentIndex = array.length;

	// While there remain elements to shuffle...
	while (currentIndex != 0) {

		// Pick a remaining element...
		let randomIndex = Math.floor(Math.random() * currentIndex);
		currentIndex--;

		// And swap it with the current element.
		[ array[ currentIndex ], array[ randomIndex ] ] = [
			array[ randomIndex ], array[ currentIndex ] ];
	}

	return array
}

let p1 = shuffle(pesele).slice(0, 100)
let p2 = shuffle(pesele).slice(0, 100)
let p3 = shuffle(pesele).slice(0, 100)
let p4 = shuffle(pesele).slice(0, 100)
let p5 = shuffle(pesele).slice(0, 100)
let p6 = shuffle(pesele).slice(0, 100)

// p1 is length check
function p1_gen(el) {
	if (Math.random() > 0.5) {

		let len = Math.floor(Math.random() * 10) + 1

		return el.slice(0, len)
	}

	return el
}

p1 = p1.map(p1_gen)
	.map(el => [ el, validate_PESEL(el) ? "false" : "true" ])


// p2 is charset check
letter = [ "a", "b", "c", "d", "e", "f", "g", "h", "k", "l", "x" ]
function p2_gen(el) {
	if (Math.random() > 0.5) {

		let index = Math.floor(Math.random() * 11)

		return el.split("").map((a, i) => i == index ? letter[ index ] : a).join("")
	}

	return el
}

p2 = p2.map(p2_gen)
	.map(el => [ el, validate_PESEL(el) ? "false" : "true" ])


// p3 is month check
function p3_gen(el) {
	if (Math.random() > 0.5) {

		let month = (13 + Math.floor(Math.random() * 7)) % 20
		let old_month = +el.substring(2, 4)
		let new_month = (old_month - old_month % 20) + month

		return el.substring(0, 2) + new_month.toString() + el.substring(4, 11)
	}

	return el
}

p3 = p3.map(p3_gen)
	.map(el => [ el, validate_PESEL(el) ? "false" : "true" ])



// p4 is day check
function p4_gen(el) {
	if (Math.random() > 0.5) {

		let day = (32 + Math.floor(Math.random() * 67))

		return el.substring(0, 4) + day.toString() + el.substring(6, 11)
	}

	return el
}

p4 = p4.map(p4_gen)
	.map(el => [ el, validate_PESEL(el) ? "false" : "true" ])


// p5 is sum check
function p5_gen(el) {
	if (Math.random() > 0.5) {

		let sum;
		do {
			sum = Math.floor(Math.random() * 9)
		} while (sum == +el[ 10 ])

		return el.substring(0, 10) + sum.toString()
	}

	return el
}

p5 = p5.map(p5_gen)
	.map(el => [ el, validate_PESEL(el) ? "false" : "true" ])

// p6 is validity check
p6 = p6.map(el => [ el, ...parse_PESEL(el) ])



const fs = require("fs")

let f1 = fs.createWriteStream("length_check.csv", { flags: "w" })
let f2 = fs.createWriteStream("charset_check.csv", { flags: "w" })
let f3 = fs.createWriteStream("month_check.csv", { flags: "w" })
let f4 = fs.createWriteStream("day_check.csv", { flags: "w" })
let f5 = fs.createWriteStream("sum_check.csv", { flags: "w" })
let f6 = fs.createWriteStream("parser_check.csv", { flags: "w" })

for (let row of p1) { f1.write(`${row.join(",")}\n`) }
for (let row of p2) { f2.write(`${row.join(",")}\n`) }
for (let row of p3) { f3.write(`${row.join(",")}\n`) }
for (let row of p4) { f4.write(`${row.join(",")}\n`) }
for (let row of p5) { f5.write(`${row.join(",")}\n`) }
for (let row of p6) { f6.write(`${row.join(",")}\n`) }
